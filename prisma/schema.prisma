// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  scout
  admin
}

enum UserStatus {
  suspended
  active
}

enum Preference {
  defender
  midfielder
  forward
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  name               String
  image              String?
  password           String?
  bio                String?
  state              String?    @default("")
  phone              Int?
  preference         Preference @default(forward)
  isSuspended        Boolean    @default(false)
  suspendedUntil     DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  role               UserRole   @default(scout)
  isOnboardingPassed Boolean    @default(false)
  status             UserStatus @default(active)
  bookmarks          Bookmark[]
  requests           Request[]

  receivedNotifications Notification[] @relation(name: "NotificationReceiver") // ✅ Notifications received by the user
  sentNotifications     Notification[] @relation(name: "NotificationSender") // ✅ Notifications sent by the user
}

model Stats {
  id                  String  @id @default(uuid())
  speed               Int
  dribble             Int
  pass                Int
  pace                Int
  defence             Int
  shot                Int
  playerId            String? @unique
  preUploadedPlayerId String? @unique

  player            Player?            @relation(fields: [playerId], references: [id], onDelete: Cascade)
  preUploadedPlayer PreUploadedPlayer? @relation(fields: [preUploadedPlayerId], references: [id], onDelete: Cascade)
}

model Player {
  id          String     @id @default(cuid())
  firstname   String
  lastname    String
  thumbnail   String
  image       String
  age         Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  videos      String[]
  side        String
  position    String
  height      Int
  weight      Int
  nationality String
  dob         String
  stats       Stats?
  bookmarked  Bookmark[]
  requested   Request[]
}

model PreUploadedPlayer {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  thumbnail String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    String[]
  side      String
  position  String
  height    Int
  weight    Int
  dob       String
  stats     Stats?
}

model Bookmark {
  id           String  @id @default(uuid())
  isBookmarked Boolean @default(false)
  userId       String
  playerId     String

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playerId, userId]) // Ensures a user can bookmark a player only once
}

model Request {
  id          String   @id @default(uuid())
  isRequested Boolean  @default(false)
  playerId    String
  userId      String
  updatedAt   DateTime @default(now()) @updatedAt

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playerId, userId]) // Ensures a user can request a player only once
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  message   String
  userId    String // The recipient of the notification
  senderId  String? // The sender of the notification (nullable for system messages)
  isRead    Boolean  @default(false)

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade, name: "NotificationReceiver")
  sender User? @relation(fields: [senderId], references: [id], onDelete: SetNull, name: "NotificationSender") // Reference to sender
}
