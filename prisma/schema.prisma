// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  scout
  admin
}

enum UserStatus {
  suspended
  active
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  name               String
  image              String?
  password           String?
  city               String?
  phone              Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  role               UserRole      @default(scout)
  isOnboardingPassed Boolean       @default(false)
  status             UserStatus    @default(active)
  bookmarks          Bookmark[]
  requests           Request[]
  notification       Notification?
}

model Stats {
  id                  String             @id @default(uuid())
  speed               Int
  dribble             Int
  pass                Int
  pace                Int
  defence             Int
  shot                Int
  player              Player?            @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId            String?            @unique
  preUploadedPlayer   PreUploadedPlayer? @relation(fields: [preUploadedPlayerId], references: [id], onDelete: Cascade)
  preUploadedPlayerId String?            @unique
}

model Player {
  id          String    @id @default(cuid())
  firstname   String
  lastname    String
  thumbnail   String
  image       String
  age         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  videos      String[]
  side        String
  position    String
  height      Int
  weight      Int
  nationality String
  dob         String
  stats       Stats?
  bookmarked  Bookmark?
  requested   Request?
}

model PreUploadedPlayer {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  thumbnail String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    String[]
  side      String
  position  String
  height    Int
  weight    Int
  dob       String
  stats     Stats?
}

model Bookmark {
  id           String  @id @default(uuid())
  isBookmarked Boolean @default(false)
  playerId     String  @unique
  player       Player  @relation(fields: [playerId], references: [id])
  userId       String
  user         User    @relation(fields: [userId], references: [id])
}

model Request {
  id          String   @id @default(uuid())
  isRequested Boolean  @default(false)
  playerId    String   @unique
  player      Player   @relation(fields: [playerId], references: [id])
  userId      String
  updatedAt   DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  venue     String
  date      String
  createdAt DateTime @default(now())
  message   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}
